expr		:	KEYWORD:VAR IDENTIFIER EQ expr
			:	comp-expr ((KEYWORD:AND|KEYWORD:OR)comp-expr)*

comp-epr	:	NOT comp-expr
			:	arith-expr ((EQEQ|LT|GT|LTEQ|GTEQ) arith-expr)*

arith-expr	:	term((PLUS|MINUS) term)*

term		:	factor((MUL|DIV|AT) factor)*

factor		:	(PLUS|MINUS) factor
			:	power

power		:	call (POW factor)*

call		:	atom (LPARAM (expr (COMMA expr)*)? RPARAM)?

atom		:	INT|FLOAT|STRING|IDENTIFIER
			:	LPAREN expr RPAREN
			:	list-expr
			:	if-expr
			:	for-expr
			:	while-expr
			:	func-def

list-expr	:	LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr		:	KEYWORD:IF expr KEYWORD:THEN expr
				(KEYWORD:ELIF expr KEYWORD THEN)*
				(KEYWORD:ELSE expr)?

for-expr	:	KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
				(KEYWORD:STEP)? KEYWORD:THEN expr

while-expr	:	KEYWORD:WHILE expr KEYWORD:THEN expr

func-def	:	KEYWORD:FUNC IDENTIFIER?
				LPARAM (IDENTIFIER (COMMA IDENTIFIER)*)? RPERAM
				ARROW expr